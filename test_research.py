import os
import json
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from query_rag import query_bot
from ragas_evaluator import evaluate_rag_response

load_dotenv()

class BeautySalonResearch:
    def __init__(self):
        self.results = []
        
        self.test_queries = [
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –º–∞–Ω—ñ–∫—é—Ä?",
            "–Ø–∫–∞ —Ü—ñ–Ω–∞ –ø–µ–¥–∏–∫—é—Ä—É?",
            "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ª–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π?",
            "–ß–∏ —î –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤?",
            "–Ø–∫–∏–π —É –≤–∞—Å –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏?",
            "–ß–∏ –º–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–æ—é?",
            "–©–æ –≤—Ö–æ–¥–∏—Ç—å —É –¥–æ–≥–ª—è–¥ –∑–∞ –æ–±–ª–∏—á—á—è–º?",
            "–Ø–∫—ñ –∑–∞—Å–æ–±–∏ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –¥–ª—è —á–∏—Å—Ç–∫–∏ –æ–±–ª–∏—á—á—è?",
            "–ß–∏ —î —É –≤–∞—Å –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏?",
            "–©–æ –≤—Ö–æ–¥–∏—Ç—å —É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –º–∞–Ω—ñ–∫—é—Ä—É?",
            "–Ø–∫–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º–∞—Å–∞–∂—É —Å–ø–∏–Ω–∏?",
            "–ß–∏ —î –∑–Ω–∏–∂–∫–∏ —É –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è?",
            "–ß–∏ –º–æ–∂–Ω–∞ –ø–æ—î–¥–Ω–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –∑–∞ –æ–¥–∏–Ω –≤—ñ–∑–∏—Ç?",
            "–Ø–∫–∏–π –¥–æ–≥–ª—è–¥ –≤–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç–µ –ø—ñ—Å–ª—è –ø—ñ–ª—ñ–Ω–≥—É?",
            "–ß–∏ –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤–∞–≥—ñ—Ç–Ω–∏–º?",
            "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –µ—Ñ–µ–∫—Ç –±—ñ–æ—Ä–µ–≤—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó?",
            "–ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∫–∏—Å–ª–æ—Ç–Ω–∏–π –ø—ñ–ª—ñ–Ω–≥ –¥–ª—è —á—É—Ç–ª–∏–≤–æ—ó —à–∫—ñ—Ä–∏?",
            "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—å –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å?",
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –º–∞—Å–∞–∂ –æ–±–ª–∏—á—á—è?",
            "–Ø–∫–∞ —Ü—ñ–Ω–∞ —á–∏—Å—Ç–∫–∏ –æ–±–ª–∏—á—á—è?",
            "–ß–∏ —Ä–æ–±–∏—Ç–µ –≤–∏ –±—Ä–æ–≤—ñ?",
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π?",
            "–Ø–∫–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–∞—Ä–∞—Ñ—ñ–Ω–æ—Ç–µ—Ä–∞–ø—ñ—ó?",
            "–ß–∏ —î –∫–æ–º–ø–ª–µ–∫—Å–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–æ–≥–ª—è–¥—É?",
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞?"
        ]
        
        self.absent_info_queries = [
            "–ß–∏ —Ä–æ–±–∏—Ç–µ –≤–∏ —Å—Ç—Ä–∏–∂–∫–∏?",
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤–æ–ª–æ—Å—Å—è?",
            "–ß–∏ —î —É –≤–∞—Å –ø–æ—Å–ª—É–≥–∏ –ø–µ—Ä—É–∫–∞—Ä—è?",
            "–î–µ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
            "–Ø–∫–∞ –≤–∞—à–∞ –∞–¥—Ä–µ—Å–∞?",
            "–Ø–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Å–∞–ª–æ–Ω—É?",
            "–ß–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –≤–∏ —É –≤–∏—Ö—ñ–¥–Ω—ñ?",
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ç–∞—Ç—É–∞–∂ –±—Ä–æ–≤–µ–π?",
            "–ß–∏ —Ä–æ–±–∏—Ç–µ –≤–∏ –Ω–∞—Ä–æ—â—É–≤–∞–Ω–Ω—è –Ω—ñ–≥—Ç—ñ–≤?",
            "–Ø–∫–∞ —Ü—ñ–Ω–∞ –ª–∞–∑–µ—Ä–Ω–æ—ó –µ–ø—ñ–ª—è—Ü—ñ—ó?"
        ]

    def run_single_test(self, query, test_type="present"):
        print(f"\n{'='*80}")
        print(f"üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø: {query}")
        print(f"üìù –¢–∏–ø —Ç–µ—Å—Ç—É: {'–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–∏—Å—É—Ç–Ω—è' if test_type == 'present' else '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è'}")
        print('='*80)
        
        try:
            answer, retrieved_contexts = query_bot(query)
            print(f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–∏—Å—Ç–µ–º–∏: {answer}")
            
            ragas_metrics = None
            try:
                ragas_metrics = evaluate_rag_response(query, answer, retrieved_contexts)
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ RAGAS –º–µ—Ç—Ä–∏–∫: {e}")
            
            result = {
                "query": query,
                "answer": answer,
                "retrieved_contexts": retrieved_contexts,
                "test_type": test_type,
                "ragas_metrics": ragas_metrics,
                "timestamp": datetime.now().isoformat(),
                "answer_quality_assessment": self.assess_answer_quality(query, answer, test_type)
            }
            
            self.results.append(result)
            return result
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {e}")
            return None

    def assess_answer_quality(self, query, answer, test_type):
        assessment = {
            "contains_apology": "–ù–∞ –∂–∞–ª—å" in answer or "–Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in answer,
            "length": len(answer),
            "mentions_context": any(word in answer.lower() for word in ["–ø—Ä–∞–π—Å", "–ø–æ—Å–ª—É–≥", "—Å–∞–ª–æ–Ω", "grn", "–≥—Ä–Ω"]),
            "appropriate_for_type": None
        }
        
        if test_type == "present":
            assessment["appropriate_for_type"] = not assessment["contains_apology"]
        else:
            assessment["appropriate_for_type"] = assessment["contains_apology"]
            
        return assessment

    def run_research(self):
        print("üöÄ –ü–û–ß–ê–¢–û–ö –î–û–°–õ–Ü–î–ñ–ï–ù–ù–Ø –°–ò–°–¢–ï–ú–ò AI-–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê –°–ê–õ–û–ù–£ –ö–†–ê–°–ò")
        print("="*100)
        
        print("\nüìã –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–ü–ò–¢–Ü–í –ù–ê –ü–†–ò–°–£–¢–ù–Æ –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ")
        print("-"*80)
        for i, query in enumerate(self.test_queries, 1):
            print(f"\n[{i}/25] –¢–µ—Å—Ç—É—é –∑–∞–ø–∏—Ç...")
            self.run_single_test(query, "present")
        
        print("\n\nüìã –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–ü–ò–¢–Ü–í –ù–ê –í–Ü–î–°–£–¢–ù–Æ –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ")
        print("-"*80)
        for i, query in enumerate(self.absent_info_queries, 1):
            print(f"\n[{i}/10] –¢–µ—Å—Ç—É—é –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...")
            self.run_single_test(query, "absent")
        
        self.save_results()
        self.generate_report()

    def save_results(self):
        filename = f"research_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")

    def generate_report(self):
        print("\n\n" + "="*100)
        print("üìä –ó–í–Ü–¢ –ü–û –î–û–°–õ–Ü–î–ñ–ï–ù–ù–Æ")
        print("="*100)
        
        present_info_results = [r for r in self.results if r["test_type"] == "present"]
        absent_info_results = [r for r in self.results if r["test_type"] == "absent"]
        
        print(f"\nüéØ –ú–ï–¢–ê:")
        print("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ä–æ–∑—É–º—ñ—Ç–∏ –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤,")
        print("–∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—ñ, –∑—Ä–æ–∑—É–º—ñ–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        
        print(f"\nüìã –ú–ï–¢–û–î–û–õ–û–ì–Ü–Ø:")
        print(f"–ë—É–ª–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –Ω–∞–±—ñ—Ä –∑ {len(self.test_queries)} —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤,")
        print("—è–∫—ñ –æ—Ö–æ–ø–ª—é–≤–∞–ª–∏ —Ç–∏–ø–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Å–∞–ª–æ–Ω—É: –∑–∞–ø–∏—Ç–∏ –ø—Ä–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø–æ—Å–ª—É–≥,")
        print("—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞ —É–º–æ–≤–∏ –∞–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π, –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å–∞–ª–æ–Ω.")
        print("–¶—ñ –∑–∞–ø–∏—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –Ω–∞–¥—Å–∏–ª–∞–ª–∏—Å—è –¥–æ –¥—ñ–∞–ª–æ–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏.")
        print(f"–î–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ {len(self.absent_info_queries)} –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é,")
        print("—è–∫–∞ —Å–≤—ñ–¥–æ–º–æ –±—É–ª–∞ –≤—ñ–¥—Å—É—Ç–Ω—è —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å.")
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        
        print(f"\n1Ô∏è‚É£ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–ò–°–£–¢–ù–¨–û–á –Ü–ù–§–û–†–ú–ê–¶–Ü–á ({len(present_info_results)} –∑–∞–ø–∏—Ç—ñ–≤):")
        correct_answers = sum(1 for r in present_info_results 
                            if r["answer_quality_assessment"]["appropriate_for_type"])
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct_answers}/{len(present_info_results)} ({correct_answers/len(present_info_results)*100:.1f}%)")
        
        with_apology = sum(1 for r in present_info_results 
                          if r["answer_quality_assessment"]["contains_apology"])
        print(f"   ‚ùå –ù–µ–≤–∏–ø—Ä–∞–≤–¥–∞–Ω—ñ –≤—ñ–¥–º–æ–≤–∏: {with_apology}/{len(present_info_results)} ({with_apology/len(present_info_results)*100:.1f}%)")
        
        print(f"\n2Ô∏è‚É£ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–Ü–î–°–£–¢–ù–¨–û–á –Ü–ù–§–û–†–ú–ê–¶–Ü–á ({len(absent_info_results)} –∑–∞–ø–∏—Ç—ñ–≤):")
        correct_refusals = sum(1 for r in absent_info_results 
                              if r["answer_quality_assessment"]["appropriate_for_type"])
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–º–æ–≤: {correct_refusals}/{len(absent_info_results)} ({correct_refusals/len(absent_info_results)*100:.1f}%)")
        
        incorrect_answers = len(absent_info_results) - correct_refusals
        print(f"   ‚ùå –ù–µ–≤—ñ—Ä–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {incorrect_answers}/{len(absent_info_results)} ({incorrect_answers/len(absent_info_results)*100:.1f}%)")
        
        print(f"\n3Ô∏è‚É£ RAGAS –ú–ï–¢–†–ò–ö–ò:")
        ragas_results = [r for r in self.results if r["ragas_metrics"] is not None]
        if ragas_results:
            avg_relevancy = sum(r["ragas_metrics"]["response_relevancy"] for r in ragas_results) / len(ragas_results)
            avg_faithfulness = sum(r["ragas_metrics"]["faithfulness"] for r in ragas_results) / len(ragas_results)
            avg_precision = sum(r["ragas_metrics"]["context_precision"] for r in ragas_results) / len(ragas_results)
            avg_overall = (avg_relevancy + avg_faithfulness + avg_precision) / 3
            
            print(f"   üéØ –°–µ—Ä–µ–¥–Ω—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {avg_relevancy:.3f}")
            print(f"   ‚úÖ –°–µ—Ä–µ–¥–Ω—è —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {avg_faithfulness:.3f}")
            print(f"   üîç –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {avg_precision:.3f}")
            print(f"   üìä –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ RAGAS: {avg_overall:.3f}")
            
            if avg_overall >= 0.8:
                quality_rating = "üü¢ –í—ñ–¥–º—ñ–Ω–Ω–∞"
            elif avg_overall >= 0.6:
                quality_rating = "üü° –•–æ—Ä–æ—à–∞"
            elif avg_overall >= 0.4:
                quality_rating = "üü† –ó–∞–¥–æ–≤—ñ–ª—å–Ω–∞"
            else:
                quality_rating = "üî¥ –ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
            
            print(f"   üìà –ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏: {quality_rating}")
        
        print(f"\n4Ô∏è‚É£ –í–ò–°–ù–û–í–ö–ò:")
        overall_accuracy = (correct_answers + correct_refusals) / len(self.results) * 100
        print(f"   üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏: {overall_accuracy:.1f}%")
        
        if overall_accuracy >= 90:
            print("   üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –≤—ñ–¥–º—ñ–Ω–Ω—É —è–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏")
        elif overall_accuracy >= 80:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –¥–æ–±—Ä–µ, —î –Ω–µ–≤–µ–ª–∏–∫—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
        elif overall_accuracy >= 70:
            print("   ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ, –ø–æ—Ç—Ä–µ–±—É—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        else:
            print("   üîß –°–∏—Å—Ç–µ–º–∞ –ø–æ—Ç—Ä–µ–±—É—î –∑–Ω–∞—á–Ω–∏—Ö –ø–æ–∫—Ä–∞—â–µ–Ω—å")
            
        print("\n" + "="*100)

if __name__ == "__main__":
    research = BeautySalonResearch()
    research.run_research() 