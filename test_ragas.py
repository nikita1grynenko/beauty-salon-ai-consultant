#!/usr/bin/env python3

import os
import sys
from dotenv import load_dotenv

load_dotenv()

def test_ragas_evaluation():
    """–¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É RAGAS –æ—Ü—ñ–Ω–∫–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RAGAS –æ—Ü—ñ–Ω–∫–∏...")
    
    try:
        from ragas_evaluator import evaluate_rag_response
        
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        test_cases = [
            {
                "user_input": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –º–∞–Ω—ñ–∫—é—Ä?",
                "response": "–ú–∞–Ω—ñ–∫—é—Ä –∫–æ—à—Ç—É—î 350 –≥—Ä–Ω.",
                "contexts": ["–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ú–∞–Ω—ñ–∫—é—Ä - 350 –≥—Ä–Ω, –ü–µ–¥–∏–∫—é—Ä - 400 –≥—Ä–Ω"]
            },
            {
                "user_input": "–Ø–∫—ñ –ø–æ—Å–ª—É–≥–∏ –Ω–∞–¥–∞—î —Å–∞–ª–æ–Ω?",
                "response": "–°–∞–ª–æ–Ω –Ω–∞–¥–∞—î –ø–æ—Å–ª—É–≥–∏ –º–∞–Ω—ñ–∫—é—Ä—É, –ø–µ–¥–∏–∫—é—Ä—É —Ç–∞ –¥–æ–≥–ª—è–¥—É –∑–∞ –æ–±–ª–∏—á—á—è–º.",
                "contexts": ["–ü–æ—Å–ª—É–≥–∏ —Å–∞–ª–æ–Ω—É: –º–∞–Ω—ñ–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –¥–æ–≥–ª—è–¥ –∑–∞ –æ–±–ª–∏—á—á—è–º, –º–∞—Å–∞–∂"]
            },
            {
                "user_input": "–ö–æ–ª–∏ –ø—Ä–∞—Ü—é—î —Å–∞–ª–æ–Ω?",
                "response": "–ù–∞ –∂–∞–ª—å, —Ü—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                "contexts": ["–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ú–∞–Ω—ñ–∫—é—Ä - 350 –≥—Ä–Ω, –ü–µ–¥–∏–∫—é—Ä - 400 –≥—Ä–Ω"]
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n--- –¢–µ—Å—Ç {i} ---")
            metrics = evaluate_rag_response(
                test_case["user_input"],
                test_case["response"], 
                test_case["contexts"]
            )
            
            if metrics:
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
            else:
                print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤")
                
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
        print("pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        return False
    
    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ!")
    return True

def test_basic_imports():
    """–¢–µ—Å—Ç—É—î –±–∞–∑–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏"""
    print("üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤...")
    
    try:
        import ragas
        print("‚úÖ RAGAS —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        from ragas.metrics import ResponseRelevancy, Faithfulness
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ RAGAS —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        from ragas import SingleTurnSample
        print("‚úÖ SingleTurnSample —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        return True
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ RAGAS...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")
        sys.exit(1)
    
    # –¢–µ—Å—Ç—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏
    if not test_basic_imports():
        print("‚ùå –¢–µ—Å—Ç–∏ —ñ–º–ø–æ—Ä—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π—à–ª–∏")
        sys.exit(1)
    
    # –¢–µ—Å—Ç—É—î–º–æ –æ—Ü—ñ–Ω–∫—É
    if test_ragas_evaluation():
        print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏")
        sys.exit(1) 