import os
import json
from datetime import datetime
from dotenv import load_dotenv
from query_rag import query_bot
from ragas_evaluator import evaluate_rag_response

load_dotenv()

class SimpleBeautySalonResearch:
    def __init__(self):
        self.results = []
        
        self.test_queries = [
            {"query": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –º–∞–Ω—ñ–∫—é—Ä?", "expected": "present", "category": "price"},
            {"query": "–Ø–∫–∞ —Ü—ñ–Ω–∞ –ø–µ–¥–∏–∫—é—Ä—É?", "expected": "present", "category": "price"},
            {"query": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è –≤—ñ–π?", "expected": "present", "category": "price"},
            {"query": "–Ø–∫–∏–π —É –≤–∞—Å –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏?", "expected": "present", "category": "info"},
            {"query": "–ß–∏ —î –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤?", "expected": "present", "category": "promo"},
            {"query": "–ß–∏ –º–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–æ—é?", "expected": "present", "category": "payment"},
            {"query": "–ß–∏ —Ä–æ–±–∏—Ç–µ –≤–∏ —Å—Ç—Ä–∏–∂–∫–∏?", "expected": "absent", "category": "service"},
            {"query": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ç–∞—Ç—É–∞–∂ –±—Ä–æ–≤–µ–π?", "expected": "absent", "category": "price"},
            {"query": "–î–µ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", "expected": "present", "category": "contact"},
            {"query": "–Ø–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Å–∞–ª–æ–Ω—É?", "expected": "present", "category": "contact"}
        ]

    def run_single_test(self, test_item):
        query = test_item["query"]
        expected = test_item["expected"]
        category = test_item["category"]
        
        print(f"\n{'='*60}")
        print(f"üîç –ó–∞–ø–∏—Ç: {query}")
        print(f"üìù –û—á—ñ–∫—É—î—Ç—å—Å—è: {'–Ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è' if expected == 'present' else '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó'}")
        print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}")
        print('='*60)
        
        try:
            answer, retrieved_contexts = query_bot(query)
            print(f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {answer}")
            
            ragas_metrics = None
            try:
                ragas_metrics = evaluate_rag_response(query, answer, retrieved_contexts)
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ RAGAS: {e}")
            
            contains_apology = "–ù–∞ –∂–∞–ª—å" in answer or "–Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in answer
            is_correct = (expected == "present" and not contains_apology) or (expected == "absent" and contains_apology)
            
            result = {
                "query": query,
                "answer": answer,
                "retrieved_contexts": retrieved_contexts,
                "expected": expected,
                "category": category,
                "ragas_metrics": ragas_metrics,
                "contains_apology": contains_apology,
                "is_correct": is_correct,
                "timestamp": datetime.now().isoformat()
            }
            
            status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û" if is_correct else "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û"
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
            
            self.results.append(result)
            return result
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return None

    def run_research(self):
        print("üöÄ –°–ü–†–û–©–ï–ù–ï –î–û–°–õ–Ü–î–ñ–ï–ù–ù–Ø AI-–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê")
        print("="*70)
        
        for i, test_item in enumerate(self.test_queries, 1):
            print(f"\n[{i}/10]")
            self.run_single_test(test_item)
        
        self.analyze_results()

    def analyze_results(self):
        print("\n\n" + "="*70)
        print("üìä –ê–ù–ê–õ–Ü–ó –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í")
        print("="*70)
        
        total = len(self.results)
        correct = sum(1 for r in self.results if r["is_correct"])
        accuracy = (correct / total) * 100 if total > 0 else 0
        
        print(f"\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å: {correct}/{total} ({accuracy:.1f}%)")
        
        present_info_tests = [r for r in self.results if r["expected"] == "present"]
        absent_info_tests = [r for r in self.results if r["expected"] == "absent"]
        
        if present_info_tests:
            present_correct = sum(1 for r in present_info_tests if r["is_correct"])
            present_accuracy = (present_correct / len(present_info_tests)) * 100
            print(f"‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {present_correct}/{len(present_info_tests)} ({present_accuracy:.1f}%)")
        
        if absent_info_tests:
            absent_correct = sum(1 for r in absent_info_tests if r["is_correct"])
            absent_accuracy = (absent_correct / len(absent_info_tests)) * 100
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {absent_correct}/{len(absent_info_tests)} ({absent_accuracy:.1f}%)")
        
        print("\nüîç –ê–ù–ê–õ–Ü–ó –ü–û–ú–ò–õ–û–ö:")
        errors = [r for r in self.results if not r["is_correct"]]
        
        for error in errors:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–ø–∏—Ç—ñ: \"{error['query']}\"")
            print(f"   –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è: {'–í—ñ–¥–ø–æ–≤—ñ–¥—å' if error['expected'] == 'present' else '–í—ñ–¥–º–æ–≤–∞'}")
            print(f"   –û—Ç—Ä–∏–º–∞–Ω–æ: {'–í—ñ–¥–º–æ–≤–∞' if error['contains_apology'] else '–í—ñ–¥–ø–æ–≤—ñ–¥—å'}")
            
            if error["expected"] == "present" and error["contains_apology"]:
                print(f"   üîç –ü—Ä–æ–±–ª–µ–º–∞: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–Ω–∞–π—à–ª–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫–∞ —î –≤ –±–∞–∑—ñ")
                print(f"   üí° –ö–æ–Ω—Ç–µ–∫—Å—Ç: {error['retrieved_contexts'][0][:100]}...")
            elif error["expected"] == "absent" and not error["contains_apology"]:
                print(f"   üîç –ü—Ä–æ–±–ª–µ–º–∞: –°–∏—Å—Ç–µ–º–∞ –¥–∞–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫–æ—ó –Ω–µ–º–∞—î")
        
        ragas_results = [r for r in self.results if r["ragas_metrics"] is not None]
        if ragas_results:
            avg_relevancy = sum(r["ragas_metrics"]["response_relevancy"] for r in ragas_results) / len(ragas_results)
            avg_faithfulness = sum(r["ragas_metrics"]["faithfulness"] for r in ragas_results) / len(ragas_results)
            avg_precision = sum(r["ragas_metrics"]["context_precision"] for r in ragas_results) / len(ragas_results)
            
            print(f"\nüìä RAGAS –ú–µ—Ç—Ä–∏–∫–∏:")
            print(f"   üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å: {avg_relevancy:.3f}")
            print(f"   ‚úÖ –¢–æ—á–Ω—ñ—Å—Ç—å: {avg_faithfulness:.3f}")
            print(f"   üîç –Ø–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {avg_precision:.3f}")
        
        print("\nüí° –ü–†–ò–ß–ò–ù–ò –ù–ï–¢–û–ß–ù–û–°–¢–Ü –°–ò–°–¢–ï–ú–ò:")
        print("1. üîç –ü—Ä–æ–±–ª–µ–º–∏ –ø–æ—à—É–∫—É —É –≤–µ–∫—Ç–æ—Ä–Ω—ñ–π –±–∞–∑—ñ - —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏")
        print("2. üìÑ –ù–µ—è–∫—ñ—Å–Ω–∞ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è PDF - —Ç–µ–∫—Å—Ç –∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –ø–æ–≥–∞–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î—Ç—å—Å—è")
        print("3. üéØ –ù–µ–¥–æ—Å–∫–æ–Ω–∞–ª–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º similarity search - –Ω–µ –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ö–æ–∂—ñ —Ç–µ–∫—Å—Ç–∏")
        print("4. ü§ñ –ó–∞–Ω–∞–¥—Ç–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ñ prompt'–∏ - —Å–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç—ñ—à–µ –≤—ñ–¥–º–æ–≤–ª—è—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏")
        print("5. üìä –ü—Ä–æ–±–ª–µ–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É - –≤–µ–ª–∏–∫—ñ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç—É –ø–æ–≥–∞–Ω–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è")
        
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –ü–û–ö–†–ê–©–ï–ù–ù–Ø:")
        print("1. üìù –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É PDF - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–π –ø–∞—Ä—Å–µ—Ä")
        print("2. üîÑ –ü–µ—Ä–µ–±—É–¥—É–≤–∞—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É –∑ –∫—Ä–∞—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —á—É–Ω–∫—ñ–Ω–≥—É")
        print("3. üéØ –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ embedding –º–æ–¥–µ–ª—å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É")
        print("4. üìã –î–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–∏–Ω–æ–Ω—ñ–º–∏ —Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –Ω–∞–∑–≤–∏ –ø–æ—Å–ª—É–≥")
        print("5. ü§ñ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–µ–Ω—à –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ñ prompt'–∏")
        
        filename = f"simple_research_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")

if __name__ == "__main__":
    research = SimpleBeautySalonResearch()
    research.run_research() 