import os
import json
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import time
from datetime import datetime
from dotenv import load_dotenv
from query_rag import query_bot
from ragas_evaluator import evaluate_rag_response

load_dotenv()

class ComprehensiveBeautySalonResearch:
    def __init__(self):
        self.results = []
        
        self.test_queries = [
            "–ß–∏ —î –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤?",
            "–Ø–∫—ñ –ø–æ—Å–ª—É–≥–∏ –≤—Ö–æ–¥—è—Ç—å —É –¥–æ–≥–ª—è–¥ –∑–∞ –æ–±–ª–∏—á—á—è–º?",
            "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ª–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–π?",
            "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—å –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å?",
            "–Ø–∫—ñ –∑–∞—Å–æ–±–∏ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –¥–ª—è —á–∏—Å—Ç–∫–∏ –æ–±–ª–∏—á—á—è?",
            "–ß–∏ –º–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–æ—é?",
            "–ß–∏ —î —É –≤–∞—Å –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏?",
            "–Ø–∫–∏–π —É –≤–∞—Å –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏?",
            "–ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∫–∏—Å–ª–æ—Ç–Ω–∏–π –ø—ñ–ª—ñ–Ω–≥ –¥–ª—è —á—É—Ç–ª–∏–≤–æ—ó —à–∫—ñ—Ä–∏?",
            "–©–æ –≤—Ö–æ–¥–∏—Ç—å —É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –º–∞–Ω—ñ–∫—é—Ä—É?",
            "–Ø–∫–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º–∞—Å–∞–∂—É —Å–ø–∏–Ω–∏?",
            "–ß–∏ —î –∑–Ω–∏–∂–∫–∏ —É –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è?",
            "–ß–∏ –º–æ–∂–Ω–∞ –ø–æ—î–¥–Ω–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –∑–∞ –æ–¥–∏–Ω –≤—ñ–∑–∏—Ç?",
            "–Ø–∫–∏–π –¥–æ–≥–ª—è–¥ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç–µ –ø—ñ—Å–ª—è –ø—ñ–ª—ñ–Ω–≥—É?",
            "–ß–∏ –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤–∞–≥—ñ—Ç–Ω–∏–º?",
            "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î –µ—Ñ–µ–∫—Ç –±—ñ–æ—Ä–µ–≤—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó?",
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –º–∞–Ω—ñ–∫—é—Ä?",
            "–Ø–∫–∞ —Ü—ñ–Ω–∞ –ø–µ–¥–∏–∫—é—Ä—É?",
            "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –ø—ñ—Ç–∏ —É —ñ–Ω—Ñ—Ä–∞—á–µ—Ä–≤–æ–Ω—É —Å–∞—É–Ω—É?",
            "–Ø–∫–∞ —Ü—ñ–Ω–∞ —Å–æ–ª—è—Ä—ñ—é?"
        ]

    def run_single_test(self, query, index):
        print(f"\n{'='*80}")
        print(f"üîç –ó–∞–ø–∏—Ç {index}/20: {query}")
        print('='*80)
        
        try:
            start_time = time.time()
            answer, retrieved_contexts = query_bot(query)
            response_time = time.time() - start_time
            
            print(f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {answer}")
            print(f"‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            ragas_metrics = None
            ragas_time = 0
            try:
                ragas_start = time.time()
                ragas_metrics = evaluate_rag_response(query, answer, retrieved_contexts)
                ragas_time = time.time() - ragas_start
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ RAGAS: {e}")
                ragas_metrics = {"response_relevancy": 0.0, "faithfulness": 0.0, "context_precision": 0.0}
            
            contains_apology = "–ù–∞ –∂–∞–ª—å" in answer or "–Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in answer or "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è" in answer
            has_meaningful_answer = not contains_apology and len(answer.strip()) > 20
            
            result = {
                "index": index,
                "query": query,
                "answer": answer,
                "retrieved_contexts": retrieved_contexts,
                "ragas_metrics": ragas_metrics,
                "contains_apology": contains_apology,
                "has_meaningful_answer": has_meaningful_answer,
                "answer_length": len(answer),
                "response_time": response_time,
                "ragas_time": ragas_time,
                "total_time": response_time + ragas_time,
                "timestamp": datetime.now().isoformat()
            }
            
            status = "‚úÖ –í–Ü–î–ü–û–í–Ü–í" if has_meaningful_answer else "‚ùå –ù–ï –í–Ü–î–ü–û–í–Ü–í"
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
            
            self.results.append(result)
            return result
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return None

    def run_research(self):
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ï –î–û–°–õ–Ü–î–ñ–ï–ù–ù–Ø AI-–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê –°–ê–õ–û–ù–£ –ö–†–ê–°–ò")
        print("="*90)
        print(f"üìù –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {len(self.test_queries)}")
        print(f"üéØ –ú–µ—Ç–∞: –û—Ü—ñ–Ω–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Å–∏—Å—Ç–µ–º–∏ –Ω–∞ —Ç–∏–ø–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        
        total_start_time = time.time()
        
        for i, query in enumerate(self.test_queries, 1):
            self.run_single_test(query, i)
        
        total_research_time = time.time() - total_start_time
        print(f"\n‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è: {total_research_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        self.analyze_results()
        self.visualize_results()

    def analyze_results(self):
        print("\n\n" + "="*90)
        print("üìä –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í")
        print("="*90)
        
        total = len(self.results)
        answered = sum(1 for r in self.results if r["has_meaningful_answer"])
        success_rate = (answered / total) * 100 if total > 0 else 0
        
        print(f"\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üîç –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {total}")
        print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {answered}")
        print(f"   ‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {total - answered}")
        print(f"   üìä –†—ñ–≤–µ–Ω—å —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ: {success_rate:.1f}%")
        
        response_times = [r["response_time"] for r in self.results]
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0
        min_response_time = min(response_times) if response_times else 0
        max_response_time = max(response_times) if response_times else 0
        
        print(f"\n‚è±Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
        print(f"   üöÄ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_response_time:.2f} —Å–µ–∫")
        print(f"   ‚ö° –ù–∞–π—à–≤–∏–¥—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {min_response_time:.2f} —Å–µ–∫")
        print(f"   üêå –ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {max_response_time:.2f} —Å–µ–∫")
        
        ragas_results = [r for r in self.results if r["ragas_metrics"] is not None]
        if ragas_results:
            avg_relevancy = sum(r["ragas_metrics"]["response_relevancy"] for r in ragas_results) / len(ragas_results)
            avg_faithfulness = sum(r["ragas_metrics"]["faithfulness"] for r in ragas_results) / len(ragas_results)
            avg_precision = sum(r["ragas_metrics"]["context_precision"] for r in ragas_results) / len(ragas_results)
            overall_score = (avg_relevancy + avg_faithfulness + avg_precision) / 3
            
            print(f"\nüìä –°–µ—Ä–µ–¥–Ω—ñ RAGAS –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   üéØ Response Relevancy: {avg_relevancy:.3f}")
            print(f"   ‚úÖ Faithfulness: {avg_faithfulness:.3f}")
            print(f"   üîç Context Precision: {avg_precision:.3f}")
            print(f"   üìà –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª: {overall_score:.3f}")
            
            if overall_score >= 0.8:
                print("   üü¢ –í—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π!")
            elif overall_score >= 0.6:
                print("   üü° –•–æ—Ä–æ—à–∞ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
            elif overall_score >= 0.4:
                print("   üü† –ó–∞–¥–æ–≤—ñ–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
            else:
                print("   üî¥ –ü–æ—Ç—Ä–µ–±—É—î –∑–Ω–∞—á–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
        
        print(f"\nüîç –ù–µ–≤–¥–∞–ª—ñ –∑–∞–ø–∏—Ç–∏:")
        failed_queries = [r for r in self.results if not r["has_meaningful_answer"]]
        for fail in failed_queries:
            print(f"   ‚ùå \"{fail['query']}\" (—á–∞—Å: {fail['response_time']:.2f}—Å)")
        
        filename = f"comprehensive_research_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")

    def visualize_results(self):
        print("\nüìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")
        
        plt.style.use('default')
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏', fontsize=16, fontweight='bold')
        
        total = len(self.results)
        answered = sum(1 for r in self.results if r["has_meaningful_answer"])
        
        labels = ['–£—Å–ø—ñ—à–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ', '–ù–µ–≤–¥–∞–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ']
        sizes = [answered, total - answered]
        colors = ['#4CAF50', '#F44336']
        explode = (0.05, 0)
        
        ax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',
                shadow=True, startangle=90)
        ax1.set_title('–ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π')
        
        ragas_results = [r for r in self.results if r["ragas_metrics"] is not None and r["has_meaningful_answer"]]
        if ragas_results:
            avg_relevancy = sum(r["ragas_metrics"]["response_relevancy"] for r in ragas_results) / len(ragas_results)
            avg_faithfulness = sum(r["ragas_metrics"]["faithfulness"] for r in ragas_results) / len(ragas_results)
            avg_precision = sum(r["ragas_metrics"]["context_precision"] for r in ragas_results) / len(ragas_results)
            
            metrics = ['Response\nRelevancy', 'Faithfulness', 'Context\nPrecision']
            values = [avg_relevancy, avg_faithfulness, avg_precision]
            colors_bar = ['#2196F3', '#4CAF50', '#FF9800']
            
            bars = ax2.bar(metrics, values, color=colors_bar, alpha=0.8)
            ax2.set_title('–°–µ—Ä–µ–¥–Ω—ñ RAGAS –º–µ—Ç—Ä–∏–∫–∏')
            ax2.set_ylabel('–û—Ü—ñ–Ω–∫–∞ (0-1)')
            ax2.set_ylim(0, 1)
            ax2.grid(True, alpha=0.3)
            
            for bar, value in zip(bars, values):
                ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02,
                        f'{value:.3f}', ha='center', va='bottom', fontweight='bold')
            
            queries = [f"Q{r['index']}" for r in ragas_results]
            overall_scores = [(r["ragas_metrics"]["response_relevancy"] + 
                             r["ragas_metrics"]["faithfulness"] + 
                             r["ragas_metrics"]["context_precision"]) / 3 for r in ragas_results]
            
            colors_scatter = ['#4CAF50' if score >= 0.7 else '#FF9800' if score >= 0.5 else '#F44336' 
                            for score in overall_scores]
            
            ax3.scatter(range(len(overall_scores)), overall_scores, c=colors_scatter, alpha=0.7, s=50)
            ax3.set_title('–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª RAGAS –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É')
            ax3.set_xlabel('–ù–æ–º–µ—Ä –∑–∞–ø–∏—Ç—É')
            ax3.set_ylabel('–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª RAGAS')
            ax3.set_ylim(0, 1)
            ax3.grid(True, alpha=0.3)
            ax3.axhline(y=0.7, color='g', linestyle='--', alpha=0.5, label='–í—ñ–¥–º—ñ–Ω–Ω–æ (0.7+)')
            ax3.axhline(y=0.5, color='orange', linestyle='--', alpha=0.5, label='–î–æ–±—Ä–µ (0.5+)')
            ax3.legend()
            
            response_times = [r["response_time"] for r in self.results]
            ax4.hist(response_times, bins=10, alpha=0.7, color='#9C27B0', edgecolor='black')
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ')
            ax4.set_xlabel('–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Å–µ–∫—É–Ω–¥–∏)')
            ax4.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π')
            ax4.grid(True, alpha=0.3)
            
            avg_time = sum(response_times) / len(response_times)
            ax4.axvline(x=avg_time, color='red', linestyle='--', alpha=0.7, 
                       label=f'–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time:.2f}—Å')
            ax4.legend()
        
        plt.tight_layout()
        
        chart_filename = f"research_charts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        plt.savefig(chart_filename, dpi=300, bbox_inches='tight')
        print(f"üìä –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {chart_filename}")
        
        plt.show()
        
        self.create_detailed_metrics_chart()

    def create_detailed_metrics_chart(self):
        ragas_results = [r for r in self.results if r["ragas_metrics"] is not None and r["has_meaningful_answer"]]
        
        if not ragas_results:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ RAGAS")
            return
        
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
        
        queries = [f"Q{r['index']}" for r in ragas_results]
        relevancy = [r["ragas_metrics"]["response_relevancy"] for r in ragas_results]
        faithfulness = [r["ragas_metrics"]["faithfulness"] for r in ragas_results]
        precision = [r["ragas_metrics"]["context_precision"] for r in ragas_results]
        
        x = np.arange(len(queries))
        width = 0.25
        
        bars1 = ax1.bar(x - width, relevancy, width, label='Response Relevancy', color='#2196F3', alpha=0.8)
        bars2 = ax1.bar(x, faithfulness, width, label='Faithfulness', color='#4CAF50', alpha=0.8)
        bars3 = ax1.bar(x + width, precision, width, label='Context Precision', color='#FF9800', alpha=0.8)
        
        ax1.set_xlabel('–ó–∞–ø–∏—Ç–∏')
        ax1.set_ylabel('–û—Ü—ñ–Ω–∫–∞ RAGAS (0-1)')
        ax1.set_title('–î–µ—Ç–∞–ª—å–Ω—ñ RAGAS –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É')
        ax1.set_xticks(x)
        ax1.set_xticklabels(queries, rotation=45)
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        ax1.set_ylim(0, 1)
        
        for bars in [bars1, bars2, bars3]:
            for bar in bars:
                height = bar.get_height()
                if height > 0:
                    ax1.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                           f'{height:.2f}', ha='center', va='bottom', fontsize=8)
        
        response_times = [r["response_time"] for r in self.results]
        query_indices = list(range(1, len(response_times) + 1))
        
        bars_time = ax2.bar(query_indices, response_times, color='#9C27B0', alpha=0.7)
        ax2.set_xlabel('–ù–æ–º–µ—Ä –∑–∞–ø–∏—Ç—É')
        ax2.set_ylabel('–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Å–µ–∫—É–Ω–¥–∏)')
        ax2.set_title('–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É')
        ax2.grid(True, alpha=0.3)
        
        avg_time = sum(response_times) / len(response_times)
        ax2.axhline(y=avg_time, color='red', linestyle='--', alpha=0.7, 
                   label=f'–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time:.2f}—Å')
        ax2.legend()
        
        for bar, time_val in zip(bars_time, response_times):
            ax2.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.02,
                    f'{time_val:.2f}—Å', ha='center', va='bottom', fontsize=8, rotation=90)
        
        plt.tight_layout()
        
        detailed_chart_filename = f"detailed_ragas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        plt.savefig(detailed_chart_filename, dpi=300, bbox_inches='tight')
        print(f"üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ RAGAS –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {detailed_chart_filename}")
        
        plt.show()

if __name__ == "__main__":
    research = ComprehensiveBeautySalonResearch()
    research.run_research() 