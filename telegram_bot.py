import os
import telebot
import datetime
import shutil
from dotenv import load_dotenv
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from logger import log_query, get_stats, get_top_queries
from build_vectorstore import build_vector_store
from ragas_evaluator import evaluate_rag_response

load_dotenv()

bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
openai_api_key = os.getenv("OPENAI_API_KEY")

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
admin_ids_raw = os.getenv("ADMIN_USER_IDS", "")
ADMIN_USER_IDS = [id.strip() for id in admin_ids_raw.split(",") if id.strip()]

# –í–∏–≤–æ–¥–∏–º–æ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {ADMIN_USER_IDS}")

bot = telebot.TeleBot(bot_token)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø—Ä–æ—Ü–µ—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
user_states = {}

def query_bot(user_query: str) -> tuple[str, list[str]]:
    db = Chroma(persist_directory="db", embedding_function=OpenAIEmbeddings())
    results = db.similarity_search(user_query, k=3)
    context = "\n---\n".join([doc.page_content for doc in results])
    retrieved_contexts = [doc.page_content for doc in results]

    system_prompt = f"""
–¢–∏ ‚Äî –∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω—É –∫—Ä–∞—Å–∏ ¬´ESTHEIQUE¬ª. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–ª—ñ—î–Ω—Ç–∞–º —Ç—ñ–ª—å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤–µ–¥–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

–Ø–∫—â–æ —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –Ω–µ–º–∞—î —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî —Å–∫–∞–∂–∏: "–ù–∞ –∂–∞–ª—å, —Ü—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}
"""

    chat = ChatOpenAI(temperature=0.2, model_name="gpt-4")
    messages = [
        SystemMessage(content=system_prompt),
        HumanMessage(content=user_query)
    ]
    response = chat.invoke(messages)
    return response.content, retrieved_contexts

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.reply_to(message, "–í—ñ—Ç–∞—î–º–æ —É —Å–∞–ª–æ–Ω—ñ –∫—Ä–∞—Å–∏ ¬´ESTHEIQUE¬ª. –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")

@bot.message_handler(commands=['myid'])
def show_id(message):
    """–ü–æ–∫–∞–∑—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = str(message.from_user.id)
    is_admin = user_id in ADMIN_USER_IDS
    
    admin_status = "–í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    bot.reply_to(message, f"–í–∞—à ID: `{user_id}`\n{admin_status}\n\n–î–æ—Å—Ç—É–ø–Ω—ñ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: `{ADMIN_USER_IDS}`", parse_mode="Markdown")

@bot.message_handler(commands=['addadmin'])
def add_admin(message):
    """–î–æ–¥–∞—î –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = str(message.from_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_USER_IDS and ADMIN_USER_IDS:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —è–∫—â–æ –Ω–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return
    
    # –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏
    command_args = message.text.split()
    if len(command_args) != 2:
        bot.reply_to(message, "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addadmin USER_ID\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `/addadmin 123456789`", parse_mode="Markdown")
        return
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    new_admin_id = command_args[1].strip()
    
    # –Ø–∫—â–æ ID –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ü–µ
    if new_admin_id in ADMIN_USER_IDS:
        bot.reply_to(message, f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {new_admin_id} –≤–∂–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –î–æ–¥–∞—î–º–æ ID –¥–æ —Å–ø–∏—Å–∫—É
    ADMIN_USER_IDS.append(new_admin_id)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª .env
    try:
        env_file_path = ".env"
        env_lines = []
        
        # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
        with open(env_file_path, "r") as f:
            env_lines = f.readlines()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä—è–¥–æ–∫ –∑ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        updated = False
        for i, line in enumerate(env_lines):
            if line.startswith("ADMIN_USER_IDS="):
                env_lines[i] = f'ADMIN_USER_IDS="{",".join(ADMIN_USER_IDS)}"\n'
                updated = True
                break
        
        # –Ø–∫—â–æ —Ä—è–¥–∫–∞ –Ω–µ –±—É–ª–æ, –¥–æ–¥–∞—î–º–æ
        if not updated:
            env_lines.append(f'ADMIN_USER_IDS="{",".join(ADMIN_USER_IDS)}"\n')
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        with open(env_file_path, "w") as f:
            f.writelines(env_lines)
        
        bot.reply_to(message, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {new_admin_id} –¥–æ–¥–∞–Ω–æ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É .env: {e}")
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É .env: {e}")

@bot.message_handler(commands=['updateprice'])
def update_price_command(message):
    """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
    user_id = str(message.from_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_USER_IDS:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
        return
    
    # –ü–æ—è—Å–Ω—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏
    instructions = (
        "üìù *–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞*\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å PDF-—Ñ–∞–π–ª –∑ –Ω–æ–≤–∏–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º. "
        "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è –∑–±–µ—Ä–µ–∂—É –π–æ–≥–æ —ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É –¥–∞–Ω–∏—Ö.\n\n"
        "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å, –Ω–∞–ø–∏—à—ñ—Ç—å /cancel"
    )
    bot.reply_to(message, instructions, parse_mode="Markdown")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_states[user_id] = "waiting_for_price_pdf"

@bot.message_handler(commands=['cancel'])
def cancel_operation(message):
    """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = str(message.from_user.id)
    
    if user_id in user_states:
        del user_states[user_id]
        bot.reply_to(message, "‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        bot.reply_to(message, "‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
    user_id = str(message.from_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ PDF-—Ñ–∞–π–ª –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in user_states and user_states[user_id] == "waiting_for_price_pdf":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ PDF-—Ñ–∞–π–ª
        file_info = message.document
        if not file_info.file_name.lower().endswith('.pdf'):
            bot.reply_to(message, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF.")
            return
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        file_id = file_info.file_id
        file_path = bot.get_file(file_id).file_path
        downloaded_file = bot.download_file(file_path)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs("data", exist_ok=True)
        
        # –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
        price_list_path = "data/–ü—Ä–∞–π—Å –ë–µ—Ä–µ–∑–µ–Ω—å 2025.pdf"
        backup_path = f"data/backup_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        try:
            # –Ø–∫—â–æ —ñ—Å–Ω—É—î —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª, —Ä–æ–±–∏–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
            if os.path.exists(price_list_path):
                shutil.copy2(price_list_path, backup_path)
                bot.reply_to(message, f"‚ÑπÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
            with open(price_list_path, "wb") as new_file:
                new_file.write(downloaded_file)
            
            bot.reply_to(message, "‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
            
            # –ü–∏—Ç–∞—î–º–æ, —á–∏ —Ç—Ä–µ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É
            markup = telebot.types.InlineKeyboardMarkup()
            yes_button = telebot.types.InlineKeyboardButton("–¢–∞–∫, –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", callback_data="update_vectorstore")
            no_button = telebot.types.InlineKeyboardButton("–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î", callback_data="skip_update")
            markup.add(yes_button, no_button)
            
            bot.send_message(message.chat.id, "–ë–∞–∂–∞—î—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ –Ω–æ–≤–∏–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º?", reply_markup=markup)
            
            # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            del user_states[user_id]
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {str(e)}")
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["update_vectorstore", "skip_update"])
def callback_handler(call):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏"""
    if call.data == "update_vectorstore":
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚è≥ –û–Ω–æ–≤–ª—é—é –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
        )
        
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É
            build_vector_store()
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            bot.send_message(call.message.chat.id, "‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞ –±–∞–∑–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏: {str(e)}")
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏: {e}")
    else:  # skip_update
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ÑπÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ."
        )

@bot.message_handler(commands=['stats'])
def show_stats(message):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
    user_id = str(message.from_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_USER_IDS:
        bot.reply_to(message, f"‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –í–∞—à ID: {user_id}. –ê–¥–º—ñ–Ω ID: {ADMIN_USER_IDS}")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_stats()
    top_queries = get_top_queries(10)
    
    stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤*\n\n"
    stats_text += f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: {stats['total_queries']}\n"
    stats_text += f"–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: {stats['unique_queries']}\n"
    stats_text += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['users']}\n\n"
    
    if top_queries:
        stats_text += "*–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –∑–∞–ø–∏—Ç–∏:*\n"
        for i, q in enumerate(top_queries, 1):
            stats_text += f"{i}. \"{q['query']}\" - {q['count']} —Ä–∞–∑—ñ–≤\n"
    
    bot.reply_to(message, stats_text, parse_mode="Markdown")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –ø—Ä–æ—Ü–µ—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —ñ –Ω–∞–ø–∏—Å–∞–≤ —Ç–µ–∫—Å—Ç
        user_id = str(message.from_user.id)
        if user_id in user_states:
            state = user_states[user_id]
            if state == "waiting_for_price_pdf":
                bot.reply_to(message, "üìÑ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å PDF-—Ñ–∞–π–ª –∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é.")
                return
        
        # –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç
        username = message.from_user.username or f"user_{user_id}"
        log_query(message.text, user_id=user_id, username=username)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç
        answer, retrieved_contexts = query_bot(message.text)
        bot.reply_to(message, answer)
        
        # –û—Ü—ñ–Ω—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é RAGAS (–≤–∏–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å)
        try:
            evaluate_rag_response(message.text, answer, retrieved_contexts)
        except Exception as eval_error:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ü—ñ–Ω—Ü—ñ RAGAS: {eval_error}")
            
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞:", e)
        bot.reply_to(message, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
bot.infinity_polling()
