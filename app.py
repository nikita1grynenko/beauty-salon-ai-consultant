import os
from dotenv import load_dotenv
from query_rag import query_bot
from build_vectorstore import build_vector_store
from logger import log_query, get_stats, get_top_queries

load_dotenv()


def print_stats():
    """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –µ–∫—Ä–∞–Ω"""
    stats = get_stats()
    top_queries = get_top_queries(10)
    
    print("\n" + "="*50)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–ò–¢–Ü–í")
    print("="*50)
    print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: {stats['total_queries']}")
    print(f"–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: {stats['unique_queries']}")
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['users']}")
    
    if 'sources' in stats:
        print("\n–î–∂–µ—Ä–µ–ª–∞ –∑–∞–ø–∏—Ç—ñ–≤:")
        for source, count in stats['sources'].items():
            print(f"  - {source}: {count}")
    
    if top_queries:
        print("\n–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –∑–∞–ø–∏—Ç–∏:")
        for i, q in enumerate(top_queries, 1):
            print(f"{i}. \"{q['query']}\" - {q['count']} —Ä–∞–∑—ñ–≤")
    print("="*50 + "\n")


def main():
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–∞–∑–∞ –≤–∂–µ —ñ—Å–Ω—É—î
    if not os.path.exists("db"):
        print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏...")
        build_vector_store()

    print("\nBeauty Salon AI Consultant")
    print("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ù–∞–ø–∏—à—ñ—Ç—å '–≤–∏—Ö—ñ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
    print("–ù–∞–ø–∏—à—ñ—Ç—å '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤.\n")

    while True:
        user_input = input("–ö–ª—ñ—î–Ω—Ç: ")
        
        if user_input.lower() in ["–≤–∏—Ö—ñ–¥", "exit"]:
            print("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
            break
            
        if user_input.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            print_stats()
            continue
            
        # –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç
        log_query(user_input, source="app")
        
        answer = query_bot(user_input)
        print("–ë–æ—Ç:", answer, "\n")


if __name__ == "__main__":
    main()
